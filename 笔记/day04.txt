基本正则表达式

  什么是正则表达式
        使用"一串符号"来描述有共同属性的数据 

^ 匹配行首(以什么什么为开头的行)
例:
[root@server0 ~]# grep "^root" /etc/passwd
root:x:0:0:root:/root:/bin/bash

& 匹配行尾(以什么什么为结尾的行)
例:
[root@server0 ~]# grep "bash$" /etc/passwd
root:x:0:0:root:/root:/bin/bash
student:x:1000:1000:Student User:/home/student:/bin/bash
u:x:1001:1001::/home/u:/bin/bash
fdsf:x:1002:1002::/home/fdsf:/bin/bash
gfd:x:1003:1003::/home/gfd:/bin/bash

[ ] 查找有字符a或b的行(集合,匹配集合中的任意单个字符)
例:
[root@server0 ~]# cat /zhai.txt
abc
aaa 
asaaa
[root@server0 ~]# grep "[ab]" /zhai.txt
abc
aaa
xyzaaa
或
[root@localhost ~]# egrep 'root[:]' /etc/passwd  #匹配root右边接有：

同时查找多个以什么什么开头
例:
[root@client ~]# grep -E '^(root|daemon)' /etc/passwd

-q 不显示查找到信息
例:
[root@zhai ~]# grep -q '^127.0.0.1' /etc/hosts && echo "dfas" || echo "fds"

[^] 对集合取反
例:
[root@server0 ~]# grep "[a^]" /zyq.txt #查找包含a的行
abc
qqdfa
dsaf098
dsa
sa
[root@server0 ~]# grep "[^a]" /zyq.txt #查找包含a的行和不包含a的行
abc
qqdfa
dsaf098
dsa
sa
yy

==================================================================
扩展正则表达式

egrep过滤工具
   文本处理顺序: 以行为单位,逐行处理
   默认只输出与表达相匹配的文本行
基本用法
   格式1: egrep [选项] '正则表达式'  文件..
   格式2: 前置命令 | egrep [选项] '正则表达式'

常用命令选项
  -i： 忽略字母大小写
  -v: 条件取反
  -c: 统计匹配的行数
  -q: 静默 无任何输出 一般用于检测
  -n: 显示出匹配结果所在的行号
 --color: 标红显示匹配字串

egrep 等价于 grep -E
grep -E或egrep命令

-m 匹配前几行
例：
[root@server0 ~]# egrep -m3 "bash$" /etc/passwd #以字符串bash行尾的行，只匹配3行

-c 输出匹配行数
与通过管道再 wc -l的效果是相同的，但是写法更简便。
例：
[root@server0 ~]# egrep -c "bin/bash$" /etc/passwd
或
[root@server0 ~]# egrep "bin/bash$" /etc/passwd | wc -l

输出空行
[root@server0 ~]# egrep -v "." /etc/rc.local
或
[root@server0 ~]# egrep "^$" /etc/rc.local

{n,m} 匹配n次到m次
例:
[root@server0 ~]# cat /zhai.txt
abc
aaa
xyzaaa
ccc
[root@server0 ~]# egrep "a{2,3}" /zhai.txt #查找a出现2次到3次的行
aaa
xyzaaa

{n} 匹配前一个字符n次
例:
[root@server0 ~]# cat /zhai.txt
abc
aaa
xyzaaa
ccc
[root@server0 ~]# egrep "a{2}" /zhai.txt
aaa
xyzaaa
或
[root@server0 ~]# cat /zhai02.txt
good
goood
goooood
[root@server0 ~]# egrep "go{2}d" /zhai02.txt
good

{n,}  匹配前一个字符n次以上
例:
[root@server0 ~]# cat /zhai.txt
abc 
aaa 
xyzaaa 
ccc
[root@server0 ~]# egrep "a{2,}" /zhai.txt  #查找a出现2次以及2次以上的行
aaa
xyzaaa

+ 最少匹配一次(至少出现一次)
例:
[root@server0 ~]# cat /zhai.txt
abc 
aaa 
xyzaaa 
ccc
[root@server0 ~]# egrep "a+" /zhai.txt  #查找a出现1次以及1次以上的行,相当于"a{1,}"
abc
aaa
xyzaaa

? 最多匹配一次(最多出现一次（可能没有）)
例:
[root@server0 ~]# cat /zhai.txt
abc
aaa
xyzaaa
ccc
[root@server0 ~]# egrep "a?" /zhai.txt #查找a出现1次或0次的行
abc
aaa
xyzaaa
ccc
或
[root@server0 ~]# egrep "abc?" /zhai.txt  #查找单词abc,其中c可以出现1次或0次
abc

| 或者
例:
[root@server0 ~]# cat  /zhai.txt
abc
aaa
xyzaaa
ccc
[root@server0 ~]# egrep "ab|xy" /zhai.txt #查找包含ab或xy行
abc
xyzaaa
或
[root@server0 ~]# grep -E "(ab|xy)" /zhai.txt
abc
xyzaaa

() 组合为整体,保留
例:
[root@server0 ~]# cat  /zhai03.txt
zyzyzyzyzyzy
zy
[root@server0 ~]# egrep "(zy){2}" /zhai03.txt  #查找单词zy出现了2次的行
zyzyzyzyzyzy

\b 单词边界
例:
[root@server0 ~]# cat /zhai.txt
abc
aaa
xyzaaa
ccc
[root@server0 ~]# egrep "\bab" /zhai.txt #查找单词ab,前面必须与其他字符隔开或前面没有任何字符
abc
或

[A-Z] 包括大写字母的行
例：
[root@localhost ~]# egrep '[A-Z]' /etc/passwd

[a-z] 包括小写字母的行
例：
[root@localhost ~]# egrep '[a-z]' /etc/passwd

过滤“非小写字母”的其它字符
例：
[root@localhost ~]# egrep '[^a-z]' /etc/passwd

\b \b 或\< \>输出包括单词
例：
[root@localhost ~]# egrep '\bboot\b' /etc/rc.local
或
[root@localhost ~]# egrep '\<all\>' /etc/rc.local

\>或\b 输出包括以“ll”结尾的单词的行
[root@server0 ~]#  egrep 'll\>' /etc/rc.local
或
[root@server0 ~]#  egrep 'll\b' /etc/rc.local

输出/etc/passwd文件内“r”开头且以“nologin”结尾的用户记录，即中间可以是任意字符：
[root@svr5 ~]# egrep '^r.*nologin$' /etc/passwd

\w  匹配字母数字下划线 [a-Z0-9]
例:
[root@server0 ~]# cat /zhai04.txt
bc45
_fassdf
reerae9
fdsrt fdsfi
rro{}.ewrwe
[root@server0 ~]# grep "\w" /zhai04.txt  #
bc45
_fassdf
reerae9
fdsrt fdsfi
rro{}.ewrwe

\s 匹配空格,制表符
例:
[root@server0 ~]# cat /zhai04.txt
bc45
_fassdf
reerae9
fdsrt fdsfi
rro{}.ewrwe
[root@server0 ~]# grep "\s" /zhai04.txt  #查找包含空格的行
fdsrt fdsfi

-P \d  匹配数字 [0-9]
例:
[root@server0 ~]# cat /zhai04.txt
bc45
_fassdf
reerae9
fdsrt fdsfi
rro{}.ewrwe
[root@server0 ~]# grep -P "\d" /zhai04.txt
bc45
reerae9

======================================================================
sed基本用法: 流式编辑器,可以查看和编辑文档,
   删除文件中每行的第二个、最后一个字符
   将文件中每行的第一个、第二个字符互换
   删除文件中所有的数字
   为文件中每个大写字母添加括号

sed文本处理工具的用法：
    用法1：前置命令 | sed  [选项]  '条件指令'
    用法2：sed  [选项]  '条件指令'  文件.. ..

sed命令的常用选项如下：
  -n（屏蔽默认输出，默认sed会输出读取文档的全部内容）
  -r（让sed支持扩展正则）
  -i（sed直接修改源文件，默认sed只是通过内存临时修改文件，源文件无影响）
   p  输出文本内容
1）sed命令的 -n 选项
   执行p打印等过滤操作时，希望看到的是符合条件的文本。但不使用任何选项时，默认会将原始文本一并输出，
   从而干扰过滤效果。比如，尝试用sed输出/etc/hosts的第1行

======================================================================
sed的输出

例:
[root@server0 ~]# cat /zhai06.txt
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

[root@server0 ~]# sed  "p" /zhai06.txt #输出文本所有行,并附加默认输出的行
root:x:0:0:root:/root:/bin/bash
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

[root@server0 ~]# sed -n  "p" /zhai06.txt #输出文本所有行,没有默认输出的行
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

[root@server0 ~]# sed -n  "1p" /zhai06.txt #输出文本第一行
root:x:0:0:root:/root:/bin/bash
或
[root@server0 ~]# sed -n  "3p" /zhai06.txt #输出文本第三行
daemon:x:2:2:daemon:/sbin:/sbin/nologin

[root@server0 ~]# sed -n  "2p;4p" /zhai06.txt #输出文本第二行和第三行
bin:x:1:1:bin:/bin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin

[root@server0 ~]# sed -n  "1,3p" /zhai06.txt #输出文本第一行至第三行
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin

[root@server0 ~]# sed -n "1,+2p" /zhai06.txt #输出文本第一行以及后面两行
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin

[root@server0 ~]# sed -n "3,+2p" /zhai06.txt #输出文本第三行以及后面两行
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

[root@server0 ~]# sed -n "1~2p" /zhai06.txt #输出奇数行
root:x:0:0:root:/root:/bin/bash
daemon:x:2:2:daemon:/sbin:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

[root@server0 ~]# sed -n "1~2p" /zhai06.txt  #输出偶数行
root:x:0:0:root:/root:/bin/bash
daemon:x:2:2:daemon:/sbin:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
[root@server0 ~]# sed -n "2~2p" /zhai06.txt
bin:x:1:1:bin:/bin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin

[root@server0 ~]# sed -n '/o\{2\}/p' /zhai06.txt  输出有两个连续的o的行
root:x:0:0:root:/root:/bin/bash
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

-r（sed直接修改源文件，默认sed只是通过内存临时修改文件，源文件无影响）
例:
[root@server0 ~]# sed -rn '/o{2}/p' /zhai06.txt
root:x:0:0:root:/root:/bin/bash
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
[root@server0 ~]# cat /zhai06.txt
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
[root@server0 ~]# sed -rn '/o{2}/p' /zhai06.txt  #使用扩展正则,输出有两个连续的o的行
root:x:0:0:root:/root:/bin/bash
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

$=
例:
[root@server0 ~]# sed -n '$=' /zhai06.txt #统计文件有多少行
8

注释掉
[root@svr5 ~]# sed '4,7s/^/#/'   a.txt         //将第4~7行注释掉（行首加#号）

=====================================================================
sed的删除
[root@server0 ~]# sed 'd' /zhai06.txt #删除所有行

[root@server0 ~]# sed '4d' /zhai06.txt #删除第四行
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt

[root@server0 ~]# sed '1,4d' /zhai06.txt #删除第一行至第四行
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt

[root@server0 ~]# sed '1,+2d' /zhai06.txt #删除第一行以及后面两行
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt

[root@server0 ~]# sed '1~2d' /zhai06.txt #删除奇数行
bin:x:1:1:bin:/bin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
halt:x:7:0:halt:/sbin:/sbin/halt

[root@server0 ~]# sed '2~2d' /zhai06.txt #删除偶数行
root:x:0:0:root:/root:/bin/bash
daemon:x:2:2:daemon:/sbin:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown

[root@server0 ~]# sed '/^root/d' /zhai06.txt  #删除以root开头的行
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt

[root@server0 ~]# sed '/root&/d' /zhai06.txt #删除以root结尾的行
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt

[root@server0 ~]# cat /z.txt
Hello the world
   Ni haO Ma Beijing 
[root@server0 ~]# sed 's/.//2 ; s/.$//' /z.txt  #删除文件中第一行的第二个、最后一个字符
Hllo the worl
  Ni haO Ma Beijing

删除文件中所有的数字
因原文件内没有数字，行首也没有空格，这里稍作做一点处理，生成一个新测试文件：
[root@svr5 ~]# sed 's/[0-9]//' nssw.txt

====================================================================
set的替换

例:
[root@server0 ~]# cat /zhai07.txt
2017 2011 2018
2017 2017 2024
2017 2017 2017
[root@server0 ~]# sed  's/2017/888/' /zhai07.txt  #把所有行的第1行2017替换888
888 2011 2018
888 2017 2024
888 2017 2017
[root@server0 ~]# sed  's/2017/888/g' /zhai07.txt #把所有行的所有2017替换为888
888 2011 2018
888 888 2024
888 888 888

[root@server0 ~]# sed  's/2017/888/2' /zhai07.txt #把所有行的第二个2017替换为888
2017 2011 2018
2017 888 2024
2017 888 2017

[root@server0 ~]# sed  '3s/2017/888/2' /zhai07.txt #把第三行的第二个2017替换为888
2017 2011 2018
2017 2017 2024
2017 888 2017

把第三行的第二个2017替换为888和把第三行的第三个2017替换为888
[root@server0 ~]# sed  '3s/2017/888/2 ; 3s/2017/888/2' /zhai07.txt 
2017 2011 2018
2017 2017 2024
2017 888 888

[root@server0 ~]# cat p.txt
root:x:0:0:root:/root:/bin/bash
[root@server0 ~]# sed 's!/bin/bash!/sbin/sh!' p.txt #把/bin/bash换成/sbin/sh
root:x:0:0:root:/root:/sbin/sh

[root@server0 ~]# cat /z.txt
Hello the world
ni hao ma beijing 
[root@server0 ~]# sed 's/.//2 ; s/.$//' /z.txt 
Hllo the worl
n hao ma beijing

Hello the world
   Ni haO Ma Beijing 
[root@server0 ~]# sed -r 's/([A-Z])/{\1}/g' /z.txt  #将文本所有大写字母添加上大括号
{H}ello the world
   {N}i ha{O} {M}a {B}eijing 

========================================================================

2）sed命令的 -i 选项
正常情况下，sed命令所做的处理只是把操作结果（包括打印、删除等）输出到当前终端屏幕，而并不会对原始文件做任何更改：

删除文件中每行的第二个、最后一个字符
分两次替换操作，第一次替换掉第2个字符，第二次替换掉最后一个字符：
[root@svr5 ~]# sed 's/.//2 ; s/.$//' nssw.txt 

将文件中每行的第一个、倒数第1个字符互换
每行文本拆分为“第1个字符”、“中间的所有字符”、“倒数第1个字符”三个部分，然后通过替换操作重排顺序为“3-2-1”：
[root@svr5 ~]# sed -r 's/^(.)(.*)(.)$/\3\2\1/' nssw.txt

删除文件中所有的数字
因原文件内没有数字，行首也没有空格，这里稍作做一点处理，生成一个新测试文件：
[root@svr5 ~]# sed 's/[0-9]//' nssw.txt

为文件中每个大写字母添加括号
使用“（）”可实现保留功能，所以可参考下列操作解决：
[root@svr5 ~]# sed -r 's/([A-Z])/[\1]/g' nssw.txt

=========================================================================
虚拟机server:
vim  /ftp.sh
#!/bin/bash
yum -y reinstall vsftpd
cp /etc/vsftpd/vsftpd.conf  /etc/vsftpd/vsftpd.conf.old
sed -i 's/^#anon/anon/'  /etc/vsftpd/vsftpd.conf 
systemctl restart vsftpd
systemctl enable vsftpd
chmod 77 /var/ftp/pub
setenforce 0 
systemctl stop firewalld

bash /ftp.sh

真机
ftp:172.25.0.11

==========================================================================
空格与换行

[root@server0 ~]# echo -e "Hello\tword" #空格
Hello	word
[root@server0 ~]# echo -e "Hello\nword" #换行
Hello
word

字符串与文件的内容倒的显示
[root@server0 ~]# echo 123456789 | rev #将字符串倒着显示
987654321
[root@server0 ~]# tac /etc/passwd       #使文件行排列倒过来
[root@server0 ~]# tac /etc/passwd | rev #使文件行排列倒过来,同时每行内容倒过来显示

行号与行数
[root@server0 ~]# sed '=' /etc/passwd     #显示行号
[root@server0 ~]# sed -n '$=' /etc/passwd #输出文件行数
[root@server0 ~]# sed  '$=' /etc/passwd   #输入文本内容及行数

输出文本内容
[root@server0 ~]# sed '' /etc/passwd 
[root@server0 ~]# cat /etc/passwd
[root@server0 ~]# sed  '/.$/p' /etc/passwd

=======================================================================
sed多行文本处理

 sed [选项] '条件指令' 文件..
 sed工具的多行文本处理操作：
   i： 在指定的行之前插入文本
   a：在指定的行之后追加文本
   c：替换指定的行

[root@server0 ~]# cat /1.txt
tre
rewr
rewr
abc
aabbcc
yy
xx

ｉ行前插入文本
例：
[root@server0 ~]# sed '2izhai' /1.txt　＃在第二行前面插入行
tre
zhai
rewr
rewr
abc
aabbcc
yy
xx

a 行后插入文本
例:
[root@server0 ~]# sed '2aZHAIYANQUAN' /1.txt  在第2行之后添加一行ZHAIYANQUAN
tre
rewr
ZHAIYANQUAN
rewr
abc
aabbcc
yy
xx

c 替换当前行
[root@server0 ~]# sed '4czhaiyanquan' /1.txt #将第2行的内容修改为zhaiyanquan
tre
rewr
rewr
zhaiyanquan
aabbcc
yy
xx



