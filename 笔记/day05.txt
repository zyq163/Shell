文件导入导出

基本动作
  r 读取文件 
  w 保存到文件

r 读取文件 
例:
[root@server0 ~]# sed '2r /b.txt' /a.txt    #在a.txt文件第2行行后插入b.txt文件所有内容
或
[root@server0 ~]# sed '2,3r /b.txt' /a.txt  #在第2-3每行一行后插入文本b.txt

w 保存到文件
例:
[root@server0 ~]# sed '1w /b.txt' /a.txt #将a.txt第1行;另存为文件b.txt,b.txt文件是另存的内容
或
[root@server0 ~]# sed '1,3w /b.txt' /a.txt #将a.txt第1-3行;另存为文件b.txt,b.txt文件是另存的内容

==================================================================
sed流控制

! 取反操作
用途: 根据定址条件取反
例:
[root@server0 ~]# sed '/bash$/!p' /etc/passwd

提取 /etc/passwd 的用户名
[root@server0 ~]# sed -n '/bash$/p' /etc/passwd

匹配 shell 的用户名
[root@server0 ~]# sed  's/:.*//' /etc/passwd

获取用户名
[root@server0 ~]# sed -n '/bash$/s/:.*//p' /etc/passwd

[root@server0 ~]# sed -n 's/root://p' /etc/passwd

=================================================================
awk基本用法

格式：awk [选项] '[条件]{指令}' 文件
其中，print 是最常用的编辑指令；若有多条编辑指令，可用分号分隔。
Awk过滤数据时支持仅打印某一列，如第2列、第5列等。
处理文本时，若未指定分隔符，则默认将空格、制表符等作为分隔符。

awk常用内置变量：
$0 文本当前行的全部内容
$1	文本的第1列
$2	文件的第2列
$3	文件的第3列，依此类推
NR	文件当前行的行号
NF	文件当前行的列数（有几列）

1）基本操作方法
格式：awk [选项] '[条件]{指令}' 文件
例:
[root@server0 ~]# cat /a.txt
a h y 0 y
r 0 8 7 y 
p 0 u e e
[root@server0 ~]# awk '{print $3}' /a.txt    #显示文本第3列
[root@server0 ~]# awk '{print $3,$5}' /a.txt #显示文本第3列和第4列

2）选项 -F 可指定分隔符
例:
[root@server0 ~]# awk -F: '{print $1}' /etc/passwd  #打印文件第一列

NR	文件当前行的行号
NF	文件当前行的列数（有几列）
例:
[root@server0 ~]# awk '{print NR,NF}' /a.txt
1 1
2 1
3 4

2）awk的print指令不仅可以打印变量，还可以打印常量
例:
[root@server0 ~]# awk -F: '{print $1,"的解析器",$7}' /etc/passwd 

利用awk提取本机的网络流量、根分区剩余容量、获取远程失败的IP地址
1）提取IP地址
[root@server0 ~]# ifconfig eth0 | awk 'NR=="2"{print $2}'
172.25.0.11格式化输出

[root@svr5 ~]# df -h | awk '{print $4}'        //打印磁盘的剩余空间

选项 -F 可指定分隔符
输出passwd文件中以分号分隔的第1、7个字段，显示的不同字段之间以逗号隔开，操作如下：
[root@zhai ~]# awk -F: '{print $1,$7}' /etc/passwd

awk还识别多种单个的字符，比如以“:”或“/”分隔，输出第1、10个字段：
[root@zhai ~]# awk -F[:/] '{print $1,$10}' /etc/passwd


===================================================================
awk过滤的时机

例:[root@server0 ~]# awk 'BEGIN{A=20;print A*10}'
200

[root@server0 ~]# awk 'BEGIN {FS= ":"}{print $1}' /etc/passwd
或
[root@server0 ~]# awk -F: '{print $1}' /etc/passwd

local_transport = error:local delivery disabled


===================================================================
格式化输出

awk处理的时机
awk会逐行处理文本，支持在处理第一行之前做一些准备工作，以及在处理完最后一行之后做一些总结性质的工作。在命令格式上分别体现如下：
awk  [选项]  '[条件]{指令}'  文件
awk  [选项]  ' BEGIN{指令} {指令} END{指令}'  文件

[root@server0 ~]# awk 'BEGIN{A=20;print A*10}'
200

[root@server0 ~]# awk -F: 'BEGIN{User Uid Home}{print $1,$3,$6}' /etc/passwd | column -t #column -t是对齐

~ 匹配
例: 
[root@server0 ~]# awk -F: '$4~/0/{print $4}' /etc/passwd

!~ 不匹配
例:
[root@server0 ~]# awk -F: '$4~/0/{print $4}' /etc/passwd

数值比较
== 等于
例:
[root@server0 ~]# awk -F: 'NR==1{print}' /etc/passwd

!= 不等于

>= 大于或等于
例:
[root@server0 ~]# awk -F: '$3>=1000{print $1,$3}' /etc/passwd

<（小于）
例:
[root@server0 ~]# awk -F: '$3<10{print $1,$3}' /etc/passwd

大于并且小
例:  
[root@server0 ~]# awk -F: '$3>10 && $3<20' /etc/passwd   #输出账户UID大于10并且小于20的账户信息

大于或小于
例:
[root@server0 ~]# awk -F: '$3>1000 || $3<3' /etc/passwd

|| 逻辑或
例:`
[root@server0 ~]# seq 100 | awk '$1%7==0 || $1~/7/{print $1}'

=========================================================================
awk数组

1）数组的语法格式
数组是一个可以存储多个值的变量，具体使用的格式如下：
定义数组的格式：数组名[下标]=元素值
调用数组的格式：数组名[下标]
遍历数组的用法：for(变量 in 数组名){print 数组名[变量]}。
例:
[root@server0 ~]# awk 'BEGIN{sqa[0]="sdf"; sqa[1]="765";sqa[2]="146854";print sqa[0];print sqa[1]; print sqa[2]}'

sort -n 或 sort -rn #大小排序
例:
[root@server0 ~]# awk -F: '{print $3}' /etc/passwd | sort -n  #从小到大
[root@server0 ~]# awk -F: '{print $3}' /etc/passwd | sort -rn #从大到小

查看cpu使用最多的进程
[root@server0 ~]# ps -eo %cpu,%mem,ucmd | awk '{A[$3]+=$2}END{for(i in A)print A[i],i}' | sort -rn | awk 'NR==1{print $1}'
12.3
查看内存使用最多的进程
[root@server0 ~]# ps -eo %mem,%cpu,ucmd | awk '{A[$3]+=$2}END{for(i in A)print A[i],i}' | sort -rn | awk 'NR==1{print $1}'
2.5

[root@server0 ~]# uptime    #cpu负载
[root@server0 ~]# ifconfig  #网卡流量
[root@server0 ~]# free #内



